{"version":3,"file":"js/512.428a1b53.js","mappings":"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","sources":["webpack://pp/../../../src/components/VExpansionPanel/VExpansionPanels.tsx","webpack://pp/../../../src/components/VExpansionPanel/VExpansionPanelText.tsx","webpack://pp/../../../src/components/VExpansionPanel/VExpansionPanelTitle.tsx","webpack://pp/../../../src/components/VExpansionPanel/VExpansionPanel.tsx","webpack://pp/./src/views/ToggleType.vue","webpack://pp/./src/views/ToggleType.vue?f8f4","webpack://pp/../../src/composables/lazy.ts"],"sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType } from 'vue'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VExpansionPanelSymbol: InjectionKey<GroupItemProvide> = Symbol.for('vuetify:v-expansion-panel')\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport const makeVExpansionPanelsProps = propsFactory({\n  color: String,\n  static: Boolean,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'default',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n  readonly: Boolean,\n\n  ...makeComponentProps(),\n  ...makeGroupProps(),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n}, 'VExpansionPanels')\n\nexport const VExpansionPanels = genericComponent()({\n  name: 'VExpansionPanels',\n\n  props: makeVExpansionPanelsProps(),\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        color: toRef(props, 'color'),\n        readonly: toRef(props, 'readonly'),\n        static: toRef(props, 'static'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          themeClasses.value,\n          variantClass.value,\n          props.class,\n        ]}\n        style={ props.style }\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n","// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpandTransition } from '@/components/transitions'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelTextProps = propsFactory({\n  ...makeComponentProps(),\n  ...makeLazyProps(),\n}, 'VExpansionPanelText')\n\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n\n  props: makeVExpansionPanelTextProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class={[\n            'v-expansion-panel-text',\n            props.class,\n          ]}\n          style={ props.style }\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          )}\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n","// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue } from '@/composables/icons'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\n\ninterface ExpansionPanelTitleSlot {\n  collapseIcon: IconValue\n  disabled: boolean | undefined\n  expanded: boolean\n  expandIcon: IconValue\n  readonly: boolean\n}\n\nexport type VExpansionPanelTitleSlots = {\n  default: ExpansionPanelTitleSlot\n  actions: ExpansionPanelTitleSlot\n}\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  static: Boolean,\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: false,\n  },\n  readonly: Boolean,\n\n  ...makeComponentProps(),\n}, 'VExpansionPanelTitle')\n\nexport const VExpansionPanelTitle = genericComponent<VExpansionPanelTitleSlots>()({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: makeVExpansionPanelTitleProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly,\n    }))\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n            'v-expansion-panel-title--static': props.static,\n          },\n          backgroundColorClasses.value,\n          props.class,\n        ]}\n        style={[\n          backgroundColorStyles.value,\n          props.style,\n        ]}\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ !props.readonly ? expansionPanel.toggle : undefined }\n        v-ripple={ props.ripple }\n      >\n        <span class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <span class=\"v-expansion-panel-title__icon\">\n            {\n              slots.actions ? slots.actions(slotProps.value)\n              : <VIcon icon={ expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon } />\n            }\n          </span>\n        )}\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n","// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpansionPanelText } from './VExpansionPanelText'\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeLazyProps } from '@/composables/lazy'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, provide, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelProps = propsFactory({\n  title: String,\n  text: String,\n  bgColor: String,\n\n  ...makeComponentProps(),\n  ...makeElevationProps(),\n  ...makeGroupItemProps(),\n  ...makeLazyProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeVExpansionPanelTitleProps(),\n}, 'VExpansionPanel')\n\nexport type VExpansionPanelSlots = {\n  default: never\n  title: never\n  text: never\n}\n\nexport const VExpansionPanel = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanel',\n\n  props: makeVExpansionPanelProps(),\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    provideDefaults({\n      VExpansionPanelText: {\n        eager: toRef(props, 'eager'),\n      },\n      VExpansionPanelTitle: {\n        readonly: toRef(props, 'readonly'),\n      },\n    })\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n            props.class,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              key=\"title\"\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          )}\n\n          { hasText && (\n            <VExpansionPanelText key=\"text\">\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          )}\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n","<template>\r\n  <!-- type01 -->\r\n  <div class=\"pl-5 pr-5\">\r\n    <!-- type01 -->\r\n    <div>\r\n      <h2>Type01</h2>\r\n      <v-expansion-panels variant=\"accordion\" class=\"mt-3\">\r\n        <v-expansion-panel\r\n          v-for=\"(item, index) in items\"\r\n          :key=\"index\"\r\n          :title=\"item.title\"\r\n          :text=\"item.text\"\r\n        ></v-expansion-panel>\r\n      </v-expansion-panels>\r\n    </div>\r\n\r\n    <div class=\"mt-5\">\r\n      <h2>Type02</h2>\r\n      <v-expansion-panels multiple variant=\"accordion\" class=\"mt-3\">\r\n        <v-expansion-panel\r\n          v-for=\"(item, index) in items\"\r\n          :key=\"index\"\r\n          :title=\"item.title\"\r\n          :text=\"item.text\"\r\n        ></v-expansion-panel>\r\n      </v-expansion-panels>\r\n    </div>\r\n  </div>\r\n\r\n\r\n\r\n\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        openItems: [],\r\n        items: [\r\n          {title: 'item1', text:'text010101text010101text010101text010101text010101'},\r\n          {title: 'item2', text:'text020202text020202text020202text020202text020202'},\r\n          {title: 'item3', text:'text030303text030303text030303text030303text030303'}\r\n        ]\r\n      }\r\n    },\r\n  }\r\n</script>","import { render } from \"./ToggleType.vue?vue&type=template&id=31028a5c\"\nimport script from \"./ToggleType.vue?vue&type=script&lang=js\"\nexport * from \"./ToggleType.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","// Utilities\nimport { computed, shallowRef, watch } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\nexport const makeLazyProps = propsFactory({\n  eager: Boolean,\n}, 'lazy')\n\nexport function useLazy (props: { eager: boolean }, active: Ref<boolean>) {\n  const isBooted = shallowRef(false)\n  const hasContent = computed(() => isBooted.value || props.eager || active.value)\n\n  watch(active, () => isBooted.value = true)\n\n  function onAfterLeave () {\n    if (!props.eager) isBooted.value = false\n  }\n\n  return { isBooted, hasContent, onAfterLeave }\n}\n"],"names":["VExpansionPanelSymbol","Symbol","for","allowedVariants","makeVExpansionPanelsProps","propsFactory","color","String","static","Boolean","variant","type","default","validator","v","includes","readonly","makeComponentProps","makeGroupProps","makeTagProps","makeThemeProps","VExpansionPanels","genericComponent","name","props","emits","val","setup","_ref","slots","useGroup","themeClasses","provideTheme","variantClass","computed","provideDefaults","VExpansionPanel","toRef","useRender","_createVNode","tag","value","class","style","makeVExpansionPanelTextProps","makeLazyProps","VExpansionPanelText","expansionPanel","inject","Error","hasContent","onAfterLeave","useLazy","isSelected","VExpandTransition","_withDirectives","_vShow","makeVExpansionPanelTitleProps","expandIcon","IconValue","collapseIcon","hideActions","ripple","Object","VExpansionPanelTitle","directives","Ripple","backgroundColorClasses","backgroundColorStyles","useBackgroundColor","slotProps","disabled","expanded","undefined","toggle","actions","VIcon","_resolveDirective","makeVExpansionPanelProps","title","text","bgColor","makeElevationProps","makeGroupItemProps","makeRoundedProps","groupItem","useGroupItem","elevationClasses","useElevation","roundedClasses","useRounded","isDisabled","selectedIndices","group","items","reduce","arr","item","index","selected","id","push","isBeforeSelected","findIndex","some","selectedIndex","isAfterSelected","provide","eager","hasText","hasTitle","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_component_v_expansion_panels","_withCtx","_Fragment","_renderList","$data","_createBlock","_component_v_expansion_panel","key","_","_hoisted_3","_hoisted_4","multiple","data","openItems","__exports__","render","active","isBooted","shallowRef","watch"],"sourceRoot":""}